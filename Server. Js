const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const db = require('better-sqlite3')('db.sqlite3');
const path = require('path');

// Middleware
app.use(express.json());
app.use(express.static('public'));

// Database setup
db.prepare(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  username TEXT UNIQUE,
  password TEXT,
  balance INTEGER DEFAULT 1000
)`).run();

db.prepare(`CREATE TABLE IF NOT EXISTS history (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  game TEXT,
  bet INTEGER,
  result TEXT,
  win INTEGER,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP
)`).run();

// API routes

app.post('/api/register', (req, res) => {
  const { username, password } = req.body;
  try {
    const user = db.prepare('INSERT INTO users (username, password) VALUES (?, ?)').run(username, password);
    res.json({ success: true });
  } catch (e) {
    res.status(400).json({ error: 'Username sudah dipakai' });
  }
});

app.post('/api/login', (req, res) => {
  const { username, password } = req.body;
  const user = db.prepare('SELECT * FROM users WHERE username = ? AND password = ?').get(username, password);
  if (user) {
    res.json({ success: true, user });
  } else {
    res.status(401).json({ error: 'Login gagal' });
  }
});

app.post('/api/topup', (req, res) => {
  const { id } = req.body;
  db.prepare('UPDATE users SET balance = balance + 1000 WHERE id = ?').run(id);
  res.json({ success: true });
});

app.post('/api/slot', (req, res) => {
  const { id, bet } = req.body;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user || user.balance < bet) return res.status(400).json({ error: 'Saldo tidak cukup' });

  const symbols = ['🍒', '🍋', '🍉', '⭐', '7️⃣'];
  const reels = [0, 0, 0].map(() => symbols[Math.floor(Math.random() * symbols.length)]);

  let win = 0;
  if (reels[0] === reels[1] && reels[1] === reels[2]) {
    win = bet * 10;
  }

  db.prepare('UPDATE users SET balance = balance - ? + ? WHERE id = ?').run(bet, win, id);
  db.prepare('INSERT INTO history (user_id, game, bet, result, win) VALUES (?, "slot", ?, ?, ?)').run(id, bet, reels.join(''), win);
  res.json({ reels, win });
});

app.post('/api/roulette', (req, res) => {
  const { id, bet, guess } = req.body;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user || user.balance < bet) return res.status(400).json({ error: 'Saldo tidak cukup' });

  const result = Math.floor(Math.random() * 37);
  let win = 0;

  if (parseInt(guess) === result) {
    win = bet * 36;
  }

  db.prepare('UPDATE users SET balance = balance - ? + ? WHERE id = ?').run(bet, win, id);
  db.prepare('INSERT INTO history (user_id, game, bet, result, win) VALUES (?, "roulette", ?, ?, ?)').run(id, bet, result.toString(), win);
  res.json({ result, win });
});

app.get('/api/me/:id', (req, res) => {
  const id = req.params.id;
  const user = db.prepare('SELECT * FROM users WHERE id = ?').get(id);
  if (!user) return res.status(404).json({ error: 'User tidak ditemukan' });

  const history = db.prepare('SELECT * FROM history WHERE user_id = ? ORDER BY id DESC LIMIT 10').all(id);
  res.json({ user, history });
});

app.get('/api/leaderboard', (req, res) => {
  const rows = db.prepare(`SELECT username, balance FROM users ORDER BY balance DESC LIMIT 10`).all();
  res.json({ leaderboard: rows });
});

// Start server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
